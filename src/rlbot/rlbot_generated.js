// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var rlbot = rlbot || {};

/**
 * @const
 * @namespace
 */
rlbot.flat = rlbot.flat || {};

/**
 * @enum
 */
rlbot.flat.RenderType = {
  DrawLine2D: 1,
  DrawLine3D: 2,
  DrawLine2D_3D: 3,
  DrawRect2D: 4,
  DrawRect3D: 5,
  DrawString2D: 6,
  DrawString3D: 7,
  DrawCenteredRect3D: 8
};

/**
 * @enum
 */
rlbot.flat.QuickChatSelection = {
  Information_IGotIt: 0,
  Information_NeedBoost: 1,
  Information_TakeTheShot: 2,
  Information_Defending: 3,
  Information_GoForIt: 4,
  Information_Centering: 5,
  Information_AllYours: 6,
  Information_InPosition: 7,
  Information_Incoming: 8,
  Compliments_NiceShot: 9,
  Compliments_GreatPass: 10,
  Compliments_Thanks: 11,
  Compliments_WhatASave: 12,
  Compliments_NiceOne: 13,
  Compliments_WhatAPlay: 14,
  Compliments_GreatClear: 15,
  Compliments_NiceBlock: 16,
  Reactions_OMG: 17,
  Reactions_Noooo: 18,
  Reactions_Wow: 19,
  Reactions_CloseOne: 20,
  Reactions_NoWay: 21,
  Reactions_HolyCow: 22,
  Reactions_Whew: 23,
  Reactions_Siiiick: 24,
  Reactions_Calculated: 25,
  Reactions_Savage: 26,
  Reactions_Okay: 27,
  Apologies_Cursing: 28,
  Apologies_NoProblem: 29,
  Apologies_Whoops: 30,
  Apologies_Sorry: 31,
  Apologies_MyBad: 32,
  Apologies_Oops: 33,
  Apologies_MyFault: 34,
  PostGame_Gg: 35,
  PostGame_WellPlayed: 36,
  PostGame_ThatWasFun: 37,
  PostGame_Rematch: 38,
  PostGame_OneMoreGame: 39,
  PostGame_WhatAGame: 40,
  PostGame_NiceMoves: 41,
  PostGame_EverybodyDance: 42,

  /**
   * Custom text chats made by bot makers
   */
  MaxPysonixQuickChatPresets: 43,

  /**
   * Waste of CPU cycles
   */
  Custom_Toxic_WasteCPU: 44,

  /**
   * Git gud*
   */
  Custom_Toxic_GitGut: 45,

  /**
   * De-Allocate Yourself
   */
  Custom_Toxic_DeAlloc: 46,

  /**
   * 404: Your skill not found
   */
  Custom_Toxic_404NoSkill: 47,

  /**
   * Get a virus
   */
  Custom_Toxic_CatchVirus: 48,

  /**
   * Passing!
   */
  Custom_Useful_Passing: 49,

  /**
   * Faking!
   */
  Custom_Useful_Faking: 50,

  /**
   * Demoing!
   */
  Custom_Useful_Demoing: 51,

  /**
   * BOOPING
   */
  Custom_Useful_Bumping: 52,

  /**
   * The chances of that was 47525 to 1*
   */
  Custom_Compliments_TinyChances: 53,

  /**
   * Who upped your skill level?
   */
  Custom_Compliments_SkillLevel: 54,

  /**
   * Your programmer should be proud
   */
  Custom_Compliments_proud: 55,

  /**
   * You're the GC of Bots
   */
  Custom_Compliments_GC: 56,

  /**
   * Are you <Insert Pro>Bot? *
   */
  Custom_Compliments_Pro: 57
};

/**
 * @constructor
 */
rlbot.flat.ControllerState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.ControllerState}
 */
rlbot.flat.ControllerState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.ControllerState=} obj
 * @returns {rlbot.flat.ControllerState}
 */
rlbot.flat.ControllerState.getRootAsControllerState = function(bb, obj) {
  return (obj || new rlbot.flat.ControllerState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * -1 for full reverse, 1 for full forward
 *
 * @returns {number}
 */
rlbot.flat.ControllerState.prototype.throttle = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * -1 for full left, 1 for full right
 *
 * @returns {number}
 */
rlbot.flat.ControllerState.prototype.steer = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * -1 for nose down, 1 for nose up
 *
 * @returns {number}
 */
rlbot.flat.ControllerState.prototype.pitch = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * -1 for full left, 1 for full right
 *
 * @returns {number}
 */
rlbot.flat.ControllerState.prototype.yaw = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * -1 for roll left, 1 for roll right
 *
 * @returns {number}
 */
rlbot.flat.ControllerState.prototype.roll = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * true if you want to press the jump button
 *
 * @returns {boolean}
 */
rlbot.flat.ControllerState.prototype.jump = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * true if you want to press the boost button
 *
 * @returns {boolean}
 */
rlbot.flat.ControllerState.prototype.boost = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * true if you want to press the handbrake button
 *
 * @returns {boolean}
 */
rlbot.flat.ControllerState.prototype.handbrake = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.ControllerState.startControllerState = function(builder) {
  builder.startObject(8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} throttle
 */
rlbot.flat.ControllerState.addThrottle = function(builder, throttle) {
  builder.addFieldFloat32(0, throttle, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} steer
 */
rlbot.flat.ControllerState.addSteer = function(builder, steer) {
  builder.addFieldFloat32(1, steer, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} pitch
 */
rlbot.flat.ControllerState.addPitch = function(builder, pitch) {
  builder.addFieldFloat32(2, pitch, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} yaw
 */
rlbot.flat.ControllerState.addYaw = function(builder, yaw) {
  builder.addFieldFloat32(3, yaw, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} roll
 */
rlbot.flat.ControllerState.addRoll = function(builder, roll) {
  builder.addFieldFloat32(4, roll, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} jump
 */
rlbot.flat.ControllerState.addJump = function(builder, jump) {
  builder.addFieldInt8(5, +jump, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} boost
 */
rlbot.flat.ControllerState.addBoost = function(builder, boost) {
  builder.addFieldInt8(6, +boost, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} handbrake
 */
rlbot.flat.ControllerState.addHandbrake = function(builder, handbrake) {
  builder.addFieldInt8(7, +handbrake, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.ControllerState.endControllerState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.PlayerInput = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.PlayerInput}
 */
rlbot.flat.PlayerInput.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.PlayerInput=} obj
 * @returns {rlbot.flat.PlayerInput}
 */
rlbot.flat.PlayerInput.getRootAsPlayerInput = function(bb, obj) {
  return (obj || new rlbot.flat.PlayerInput).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerInput.prototype.playerIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {rlbot.flat.ControllerState=} obj
 * @returns {rlbot.flat.ControllerState|null}
 */
rlbot.flat.PlayerInput.prototype.controllerState = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.ControllerState).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.PlayerInput.startPlayerInput = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} playerIndex
 */
rlbot.flat.PlayerInput.addPlayerIndex = function(builder, playerIndex) {
  builder.addFieldInt32(0, playerIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} controllerStateOffset
 */
rlbot.flat.PlayerInput.addControllerState = function(builder, controllerStateOffset) {
  builder.addFieldOffset(1, controllerStateOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.PlayerInput.endPlayerInput = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.Vector3 = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Vector3}
 */
rlbot.flat.Vector3.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
rlbot.flat.Vector3.prototype.x = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
rlbot.flat.Vector3.prototype.y = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @returns {number}
 */
rlbot.flat.Vector3.prototype.z = function() {
  return this.bb.readFloat32(this.bb_pos + 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Vector3.createVector3 = function(builder, x, y, z) {
  builder.prep(4, 12);
  builder.writeFloat32(z);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

/**
 * @constructor
 */
rlbot.flat.Rotator = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Rotator}
 */
rlbot.flat.Rotator.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
rlbot.flat.Rotator.prototype.pitch = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
rlbot.flat.Rotator.prototype.yaw = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @returns {number}
 */
rlbot.flat.Rotator.prototype.roll = function() {
  return this.bb.readFloat32(this.bb_pos + 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} pitch
 * @param {number} yaw
 * @param {number} roll
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Rotator.createRotator = function(builder, pitch, yaw, roll) {
  builder.prep(4, 12);
  builder.writeFloat32(roll);
  builder.writeFloat32(yaw);
  builder.writeFloat32(pitch);
  return builder.offset();
};

/**
 * @constructor
 */
rlbot.flat.Touch = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Touch}
 */
rlbot.flat.Touch.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.Touch=} obj
 * @returns {rlbot.flat.Touch}
 */
rlbot.flat.Touch.getRootAsTouch = function(bb, obj) {
  return (obj || new rlbot.flat.Touch).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The name of the player involved with the touch.
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
rlbot.flat.Touch.prototype.playerName = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * Seconds that had elapsed in the game when the touch occurred.
 *
 * @returns {number}
 */
rlbot.flat.Touch.prototype.gameSeconds = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * The point of contact for the touch.
 *
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.Touch.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * The direction of the touch.
 *
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.Touch.prototype.normal = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.Touch.startTouch = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} playerNameOffset
 */
rlbot.flat.Touch.addPlayerName = function(builder, playerNameOffset) {
  builder.addFieldOffset(0, playerNameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} gameSeconds
 */
rlbot.flat.Touch.addGameSeconds = function(builder, gameSeconds) {
  builder.addFieldFloat32(1, gameSeconds, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.Touch.addLocation = function(builder, locationOffset) {
  builder.addFieldStruct(2, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} normalOffset
 */
rlbot.flat.Touch.addNormal = function(builder, normalOffset) {
  builder.addFieldStruct(3, normalOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Touch.endTouch = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.ScoreInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.ScoreInfo}
 */
rlbot.flat.ScoreInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.ScoreInfo=} obj
 * @returns {rlbot.flat.ScoreInfo}
 */
rlbot.flat.ScoreInfo.getRootAsScoreInfo = function(bb, obj) {
  return (obj || new rlbot.flat.ScoreInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.ScoreInfo.prototype.score = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.ScoreInfo.prototype.goals = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.ScoreInfo.prototype.ownGoals = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.ScoreInfo.prototype.assists = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.ScoreInfo.prototype.saves = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.ScoreInfo.prototype.shots = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.ScoreInfo.prototype.demolitions = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.ScoreInfo.startScoreInfo = function(builder) {
  builder.startObject(7);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} score
 */
rlbot.flat.ScoreInfo.addScore = function(builder, score) {
  builder.addFieldInt32(0, score, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} goals
 */
rlbot.flat.ScoreInfo.addGoals = function(builder, goals) {
  builder.addFieldInt32(1, goals, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} ownGoals
 */
rlbot.flat.ScoreInfo.addOwnGoals = function(builder, ownGoals) {
  builder.addFieldInt32(2, ownGoals, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} assists
 */
rlbot.flat.ScoreInfo.addAssists = function(builder, assists) {
  builder.addFieldInt32(3, assists, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} saves
 */
rlbot.flat.ScoreInfo.addSaves = function(builder, saves) {
  builder.addFieldInt32(4, saves, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} shots
 */
rlbot.flat.ScoreInfo.addShots = function(builder, shots) {
  builder.addFieldInt32(5, shots, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} demolitions
 */
rlbot.flat.ScoreInfo.addDemolitions = function(builder, demolitions) {
  builder.addFieldInt32(6, demolitions, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.ScoreInfo.endScoreInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.Physics = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Physics}
 */
rlbot.flat.Physics.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.Physics=} obj
 * @returns {rlbot.flat.Physics}
 */
rlbot.flat.Physics.getRootAsPhysics = function(bb, obj) {
  return (obj || new rlbot.flat.Physics).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.Physics.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Rotator=} obj
 * @returns {rlbot.flat.Rotator|null}
 */
rlbot.flat.Physics.prototype.rotation = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Rotator).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.Physics.prototype.velocity = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.Physics.prototype.angularVelocity = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.Physics.startPhysics = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.Physics.addLocation = function(builder, locationOffset) {
  builder.addFieldStruct(0, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rotationOffset
 */
rlbot.flat.Physics.addRotation = function(builder, rotationOffset) {
  builder.addFieldStruct(1, rotationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} velocityOffset
 */
rlbot.flat.Physics.addVelocity = function(builder, velocityOffset) {
  builder.addFieldStruct(2, velocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} angularVelocityOffset
 */
rlbot.flat.Physics.addAngularVelocity = function(builder, angularVelocityOffset) {
  builder.addFieldStruct(3, angularVelocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Physics.endPhysics = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.PlayerInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.PlayerInfo}
 */
rlbot.flat.PlayerInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.PlayerInfo=} obj
 * @returns {rlbot.flat.PlayerInfo}
 */
rlbot.flat.PlayerInfo.getRootAsPlayerInfo = function(bb, obj) {
  return (obj || new rlbot.flat.PlayerInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Physics=} obj
 * @returns {rlbot.flat.Physics|null}
 */
rlbot.flat.PlayerInfo.prototype.physics = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Physics).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.ScoreInfo=} obj
 * @returns {rlbot.flat.ScoreInfo|null}
 */
rlbot.flat.PlayerInfo.prototype.scoreInfo = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.ScoreInfo).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @returns {boolean}
 */
rlbot.flat.PlayerInfo.prototype.isDemolished = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * True if your wheels are on the ground, the wall, or the ceiling. False if you're midair or turtling.
 *
 * @returns {boolean}
 */
rlbot.flat.PlayerInfo.prototype.hasWheelContact = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
rlbot.flat.PlayerInfo.prototype.isSupersonic = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
rlbot.flat.PlayerInfo.prototype.isBot = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * True if the player has jumped. Falling off the ceiling / driving off the goal post does not count.
 *
 * @returns {boolean}
 */
rlbot.flat.PlayerInfo.prototype.jumped = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 *  True if player has double jumped. False does not mean you have a jump remaining, because the
 *  aerial timer can run out, and that doesn't affect this flag.
 *
 * @returns {boolean}
 */
rlbot.flat.PlayerInfo.prototype.doubleJumped = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
rlbot.flat.PlayerInfo.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerInfo.prototype.team = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.PlayerInfo.prototype.boost = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.PlayerInfo.startPlayerInfo = function(builder) {
  builder.startObject(11);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} physicsOffset
 */
rlbot.flat.PlayerInfo.addPhysics = function(builder, physicsOffset) {
  builder.addFieldOffset(0, physicsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} scoreInfoOffset
 */
rlbot.flat.PlayerInfo.addScoreInfo = function(builder, scoreInfoOffset) {
  builder.addFieldOffset(1, scoreInfoOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isDemolished
 */
rlbot.flat.PlayerInfo.addIsDemolished = function(builder, isDemolished) {
  builder.addFieldInt8(2, +isDemolished, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} hasWheelContact
 */
rlbot.flat.PlayerInfo.addHasWheelContact = function(builder, hasWheelContact) {
  builder.addFieldInt8(3, +hasWheelContact, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isSupersonic
 */
rlbot.flat.PlayerInfo.addIsSupersonic = function(builder, isSupersonic) {
  builder.addFieldInt8(4, +isSupersonic, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isBot
 */
rlbot.flat.PlayerInfo.addIsBot = function(builder, isBot) {
  builder.addFieldInt8(5, +isBot, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} jumped
 */
rlbot.flat.PlayerInfo.addJumped = function(builder, jumped) {
  builder.addFieldInt8(6, +jumped, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} doubleJumped
 */
rlbot.flat.PlayerInfo.addDoubleJumped = function(builder, doubleJumped) {
  builder.addFieldInt8(7, +doubleJumped, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
rlbot.flat.PlayerInfo.addName = function(builder, nameOffset) {
  builder.addFieldOffset(8, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} team
 */
rlbot.flat.PlayerInfo.addTeam = function(builder, team) {
  builder.addFieldInt32(9, team, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} boost
 */
rlbot.flat.PlayerInfo.addBoost = function(builder, boost) {
  builder.addFieldInt32(10, boost, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.PlayerInfo.endPlayerInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.BallInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.BallInfo}
 */
rlbot.flat.BallInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.BallInfo=} obj
 * @returns {rlbot.flat.BallInfo}
 */
rlbot.flat.BallInfo.getRootAsBallInfo = function(bb, obj) {
  return (obj || new rlbot.flat.BallInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Physics=} obj
 * @returns {rlbot.flat.Physics|null}
 */
rlbot.flat.BallInfo.prototype.physics = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Physics).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.Touch=} obj
 * @returns {rlbot.flat.Touch|null}
 */
rlbot.flat.BallInfo.prototype.latestTouch = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Touch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.BallInfo.startBallInfo = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} physicsOffset
 */
rlbot.flat.BallInfo.addPhysics = function(builder, physicsOffset) {
  builder.addFieldOffset(0, physicsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} latestTouchOffset
 */
rlbot.flat.BallInfo.addLatestTouch = function(builder, latestTouchOffset) {
  builder.addFieldOffset(1, latestTouchOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.BallInfo.endBallInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.BoostPadState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.BoostPadState}
 */
rlbot.flat.BoostPadState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.BoostPadState=} obj
 * @returns {rlbot.flat.BoostPadState}
 */
rlbot.flat.BoostPadState.getRootAsBoostPadState = function(bb, obj) {
  return (obj || new rlbot.flat.BoostPadState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * True if the boost can be picked up
 *
 * @returns {boolean}
 */
rlbot.flat.BoostPadState.prototype.isActive = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * The number of seconds since the boost has been picked up, or 0.0 if the boost is active.
 *
 * @returns {number}
 */
rlbot.flat.BoostPadState.prototype.timer = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.BoostPadState.startBoostPadState = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isActive
 */
rlbot.flat.BoostPadState.addIsActive = function(builder, isActive) {
  builder.addFieldInt8(0, +isActive, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} timer
 */
rlbot.flat.BoostPadState.addTimer = function(builder, timer) {
  builder.addFieldFloat32(1, timer, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.BoostPadState.endBoostPadState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.GameInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.GameInfo}
 */
rlbot.flat.GameInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.GameInfo=} obj
 * @returns {rlbot.flat.GameInfo}
 */
rlbot.flat.GameInfo.getRootAsGameInfo = function(bb, obj) {
  return (obj || new rlbot.flat.GameInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.GameInfo.prototype.secondsElapsed = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
rlbot.flat.GameInfo.prototype.gameTimeRemaining = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {boolean}
 */
rlbot.flat.GameInfo.prototype.isOvertime = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
rlbot.flat.GameInfo.prototype.isUnlimitedTime = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * True when cars are allowed to move, and during the pause menu. False during replays.
 *
 * @returns {boolean}
 */
rlbot.flat.GameInfo.prototype.isRoundActive = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * Only false during a kickoff, when the car is allowed to move, and the ball has not been hit,
 * and the game clock has not started yet. If both players sit still, game clock will eventually
 * start and this will become true.
 *
 * @returns {boolean}
 */
rlbot.flat.GameInfo.prototype.isKickoffPause = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * Turns true after final replay, the moment the 'winner' screen appears. Remains true during next match
 * countdown. Turns false again the moment the 'choose team' screen appears.
 *
 * @returns {boolean}
 */
rlbot.flat.GameInfo.prototype.isMatchEnded = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.GameInfo.startGameInfo = function(builder) {
  builder.startObject(7);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} secondsElapsed
 */
rlbot.flat.GameInfo.addSecondsElapsed = function(builder, secondsElapsed) {
  builder.addFieldFloat32(0, secondsElapsed, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} gameTimeRemaining
 */
rlbot.flat.GameInfo.addGameTimeRemaining = function(builder, gameTimeRemaining) {
  builder.addFieldFloat32(1, gameTimeRemaining, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isOvertime
 */
rlbot.flat.GameInfo.addIsOvertime = function(builder, isOvertime) {
  builder.addFieldInt8(2, +isOvertime, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isUnlimitedTime
 */
rlbot.flat.GameInfo.addIsUnlimitedTime = function(builder, isUnlimitedTime) {
  builder.addFieldInt8(3, +isUnlimitedTime, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isRoundActive
 */
rlbot.flat.GameInfo.addIsRoundActive = function(builder, isRoundActive) {
  builder.addFieldInt8(4, +isRoundActive, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isKickoffPause
 */
rlbot.flat.GameInfo.addIsKickoffPause = function(builder, isKickoffPause) {
  builder.addFieldInt8(5, +isKickoffPause, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isMatchEnded
 */
rlbot.flat.GameInfo.addIsMatchEnded = function(builder, isMatchEnded) {
  builder.addFieldInt8(6, +isMatchEnded, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.GameInfo.endGameInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.GameTickPacket = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.GameTickPacket}
 */
rlbot.flat.GameTickPacket.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.GameTickPacket=} obj
 * @returns {rlbot.flat.GameTickPacket}
 */
rlbot.flat.GameTickPacket.getRootAsGameTickPacket = function(bb, obj) {
  return (obj || new rlbot.flat.GameTickPacket).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {rlbot.flat.PlayerInfo=} obj
 * @returns {rlbot.flat.PlayerInfo}
 */
rlbot.flat.GameTickPacket.prototype.players = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.PlayerInfo).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.GameTickPacket.prototype.playersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {rlbot.flat.BoostPadState=} obj
 * @returns {rlbot.flat.BoostPadState}
 */
rlbot.flat.GameTickPacket.prototype.boostPadStates = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.BoostPadState).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.GameTickPacket.prototype.boostPadStatesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {rlbot.flat.BallInfo=} obj
 * @returns {rlbot.flat.BallInfo|null}
 */
rlbot.flat.GameTickPacket.prototype.ball = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.BallInfo).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.GameInfo=} obj
 * @returns {rlbot.flat.GameInfo|null}
 */
rlbot.flat.GameTickPacket.prototype.gameInfo = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.GameInfo).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.GameTickPacket.startGameTickPacket = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} playersOffset
 */
rlbot.flat.GameTickPacket.addPlayers = function(builder, playersOffset) {
  builder.addFieldOffset(0, playersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.GameTickPacket.createPlayersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.GameTickPacket.startPlayersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} boostPadStatesOffset
 */
rlbot.flat.GameTickPacket.addBoostPadStates = function(builder, boostPadStatesOffset) {
  builder.addFieldOffset(1, boostPadStatesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.GameTickPacket.createBoostPadStatesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.GameTickPacket.startBoostPadStatesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} ballOffset
 */
rlbot.flat.GameTickPacket.addBall = function(builder, ballOffset) {
  builder.addFieldOffset(2, ballOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} gameInfoOffset
 */
rlbot.flat.GameTickPacket.addGameInfo = function(builder, gameInfoOffset) {
  builder.addFieldOffset(3, gameInfoOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.GameTickPacket.endGameTickPacket = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.GoalInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.GoalInfo}
 */
rlbot.flat.GoalInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.GoalInfo=} obj
 * @returns {rlbot.flat.GoalInfo}
 */
rlbot.flat.GoalInfo.getRootAsGoalInfo = function(bb, obj) {
  return (obj || new rlbot.flat.GoalInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.GoalInfo.prototype.teamNum = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.GoalInfo.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.GoalInfo.prototype.direction = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.GoalInfo.startGoalInfo = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} teamNum
 */
rlbot.flat.GoalInfo.addTeamNum = function(builder, teamNum) {
  builder.addFieldInt32(0, teamNum, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.GoalInfo.addLocation = function(builder, locationOffset) {
  builder.addFieldStruct(1, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} directionOffset
 */
rlbot.flat.GoalInfo.addDirection = function(builder, directionOffset) {
  builder.addFieldStruct(2, directionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.GoalInfo.endGoalInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.BoostPad = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.BoostPad}
 */
rlbot.flat.BoostPad.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.BoostPad=} obj
 * @returns {rlbot.flat.BoostPad}
 */
rlbot.flat.BoostPad.getRootAsBoostPad = function(bb, obj) {
  return (obj || new rlbot.flat.BoostPad).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.BoostPad.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @returns {boolean}
 */
rlbot.flat.BoostPad.prototype.isFullBoost = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.BoostPad.startBoostPad = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.BoostPad.addLocation = function(builder, locationOffset) {
  builder.addFieldStruct(0, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isFullBoost
 */
rlbot.flat.BoostPad.addIsFullBoost = function(builder, isFullBoost) {
  builder.addFieldInt8(1, +isFullBoost, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.BoostPad.endBoostPad = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.FieldInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.FieldInfo}
 */
rlbot.flat.FieldInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.FieldInfo=} obj
 * @returns {rlbot.flat.FieldInfo}
 */
rlbot.flat.FieldInfo.getRootAsFieldInfo = function(bb, obj) {
  return (obj || new rlbot.flat.FieldInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {rlbot.flat.BoostPad=} obj
 * @returns {rlbot.flat.BoostPad}
 */
rlbot.flat.FieldInfo.prototype.boostPads = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.BoostPad).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.FieldInfo.prototype.boostPadsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {rlbot.flat.GoalInfo=} obj
 * @returns {rlbot.flat.GoalInfo}
 */
rlbot.flat.FieldInfo.prototype.goals = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.GoalInfo).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.FieldInfo.prototype.goalsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.FieldInfo.startFieldInfo = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} boostPadsOffset
 */
rlbot.flat.FieldInfo.addBoostPads = function(builder, boostPadsOffset) {
  builder.addFieldOffset(0, boostPadsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.FieldInfo.createBoostPadsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.FieldInfo.startBoostPadsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} goalsOffset
 */
rlbot.flat.FieldInfo.addGoals = function(builder, goalsOffset) {
  builder.addFieldOffset(1, goalsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.FieldInfo.createGoalsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.FieldInfo.startGoalsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.FieldInfo.endFieldInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.Float = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Float}
 */
rlbot.flat.Float.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
rlbot.flat.Float.prototype.val = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} val
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Float.createFloat = function(builder, val) {
  builder.prep(4, 4);
  builder.writeFloat32(val);
  return builder.offset();
};

/**
 * @constructor
 */
rlbot.flat.Vector3Partial = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Vector3Partial}
 */
rlbot.flat.Vector3Partial.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.Vector3Partial=} obj
 * @returns {rlbot.flat.Vector3Partial}
 */
rlbot.flat.Vector3Partial.getRootAsVector3Partial = function(bb, obj) {
  return (obj || new rlbot.flat.Vector3Partial).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.Vector3Partial.prototype.x = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.Vector3Partial.prototype.y = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.Vector3Partial.prototype.z = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.Vector3Partial.startVector3Partial = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} xOffset
 */
rlbot.flat.Vector3Partial.addX = function(builder, xOffset) {
  builder.addFieldStruct(0, xOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} yOffset
 */
rlbot.flat.Vector3Partial.addY = function(builder, yOffset) {
  builder.addFieldStruct(1, yOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} zOffset
 */
rlbot.flat.Vector3Partial.addZ = function(builder, zOffset) {
  builder.addFieldStruct(2, zOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Vector3Partial.endVector3Partial = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.RotatorPartial = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.RotatorPartial}
 */
rlbot.flat.RotatorPartial.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.RotatorPartial=} obj
 * @returns {rlbot.flat.RotatorPartial}
 */
rlbot.flat.RotatorPartial.getRootAsRotatorPartial = function(bb, obj) {
  return (obj || new rlbot.flat.RotatorPartial).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.RotatorPartial.prototype.pitch = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.RotatorPartial.prototype.yaw = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Float=} obj
 * @returns {rlbot.flat.Float|null}
 */
rlbot.flat.RotatorPartial.prototype.roll = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Float).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.RotatorPartial.startRotatorPartial = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pitchOffset
 */
rlbot.flat.RotatorPartial.addPitch = function(builder, pitchOffset) {
  builder.addFieldStruct(0, pitchOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} yawOffset
 */
rlbot.flat.RotatorPartial.addYaw = function(builder, yawOffset) {
  builder.addFieldStruct(1, yawOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rollOffset
 */
rlbot.flat.RotatorPartial.addRoll = function(builder, rollOffset) {
  builder.addFieldStruct(2, rollOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.RotatorPartial.endRotatorPartial = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.DesiredPhysics = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.DesiredPhysics}
 */
rlbot.flat.DesiredPhysics.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.DesiredPhysics=} obj
 * @returns {rlbot.flat.DesiredPhysics}
 */
rlbot.flat.DesiredPhysics.getRootAsDesiredPhysics = function(bb, obj) {
  return (obj || new rlbot.flat.DesiredPhysics).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Vector3Partial=} obj
 * @returns {rlbot.flat.Vector3Partial|null}
 */
rlbot.flat.DesiredPhysics.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3Partial).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.RotatorPartial=} obj
 * @returns {rlbot.flat.RotatorPartial|null}
 */
rlbot.flat.DesiredPhysics.prototype.rotation = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.RotatorPartial).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3Partial=} obj
 * @returns {rlbot.flat.Vector3Partial|null}
 */
rlbot.flat.DesiredPhysics.prototype.velocity = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3Partial).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3Partial=} obj
 * @returns {rlbot.flat.Vector3Partial|null}
 */
rlbot.flat.DesiredPhysics.prototype.angularVelocity = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Vector3Partial).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.DesiredPhysics.startDesiredPhysics = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.DesiredPhysics.addLocation = function(builder, locationOffset) {
  builder.addFieldOffset(0, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rotationOffset
 */
rlbot.flat.DesiredPhysics.addRotation = function(builder, rotationOffset) {
  builder.addFieldOffset(1, rotationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} velocityOffset
 */
rlbot.flat.DesiredPhysics.addVelocity = function(builder, velocityOffset) {
  builder.addFieldOffset(2, velocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} angularVelocityOffset
 */
rlbot.flat.DesiredPhysics.addAngularVelocity = function(builder, angularVelocityOffset) {
  builder.addFieldOffset(3, angularVelocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredPhysics.endDesiredPhysics = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.DesiredBallState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.DesiredBallState}
 */
rlbot.flat.DesiredBallState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.DesiredBallState=} obj
 * @returns {rlbot.flat.DesiredBallState}
 */
rlbot.flat.DesiredBallState.getRootAsDesiredBallState = function(bb, obj) {
  return (obj || new rlbot.flat.DesiredBallState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.DesiredPhysics=} obj
 * @returns {rlbot.flat.DesiredPhysics|null}
 */
rlbot.flat.DesiredBallState.prototype.physics = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.DesiredPhysics).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.DesiredBallState.startDesiredBallState = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} physicsOffset
 */
rlbot.flat.DesiredBallState.addPhysics = function(builder, physicsOffset) {
  builder.addFieldOffset(0, physicsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredBallState.endDesiredBallState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.DesiredCarState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.DesiredCarState}
 */
rlbot.flat.DesiredCarState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.DesiredCarState=} obj
 * @returns {rlbot.flat.DesiredCarState}
 */
rlbot.flat.DesiredCarState.getRootAsDesiredCarState = function(bb, obj) {
  return (obj || new rlbot.flat.DesiredCarState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.DesiredPhysics=} obj
 * @returns {rlbot.flat.DesiredPhysics|null}
 */
rlbot.flat.DesiredCarState.prototype.physics = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.DesiredPhysics).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.DesiredCarState.startDesiredCarState = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} physicsOffset
 */
rlbot.flat.DesiredCarState.addPhysics = function(builder, physicsOffset) {
  builder.addFieldOffset(0, physicsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredCarState.endDesiredCarState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.DesiredGameState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.DesiredGameState}
 */
rlbot.flat.DesiredGameState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.DesiredGameState=} obj
 * @returns {rlbot.flat.DesiredGameState}
 */
rlbot.flat.DesiredGameState.getRootAsDesiredGameState = function(bb, obj) {
  return (obj || new rlbot.flat.DesiredGameState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {rlbot.flat.DesiredBallState=} obj
 * @returns {rlbot.flat.DesiredBallState}
 */
rlbot.flat.DesiredGameState.prototype.ballState = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.DesiredBallState).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.DesiredGameState.prototype.ballStateLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {rlbot.flat.DesiredCarState=} obj
 * @returns {rlbot.flat.DesiredCarState}
 */
rlbot.flat.DesiredGameState.prototype.carStates = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.DesiredCarState).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.DesiredGameState.prototype.carStatesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.DesiredGameState.startDesiredGameState = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} ballStateOffset
 */
rlbot.flat.DesiredGameState.addBallState = function(builder, ballStateOffset) {
  builder.addFieldOffset(0, ballStateOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredGameState.createBallStateVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.DesiredGameState.startBallStateVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} carStatesOffset
 */
rlbot.flat.DesiredGameState.addCarStates = function(builder, carStatesOffset) {
  builder.addFieldOffset(1, carStatesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredGameState.createCarStatesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.DesiredGameState.startCarStatesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.DesiredGameState.endDesiredGameState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.Color = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.Color}
 */
rlbot.flat.Color.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.Color=} obj
 * @returns {rlbot.flat.Color}
 */
rlbot.flat.Color.getRootAsColor = function(bb, obj) {
  return (obj || new rlbot.flat.Color).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
rlbot.flat.Color.prototype.a = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.Color.prototype.r = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.Color.prototype.g = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.Color.prototype.b = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.Color.startColor = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} a
 */
rlbot.flat.Color.addA = function(builder, a) {
  builder.addFieldInt8(0, a, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} r
 */
rlbot.flat.Color.addR = function(builder, r) {
  builder.addFieldInt8(1, r, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} g
 */
rlbot.flat.Color.addG = function(builder, g) {
  builder.addFieldInt8(2, g, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} b
 */
rlbot.flat.Color.addB = function(builder, b) {
  builder.addFieldInt8(3, b, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.Color.endColor = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.RenderMessage = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.RenderMessage}
 */
rlbot.flat.RenderMessage.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.RenderMessage=} obj
 * @returns {rlbot.flat.RenderMessage}
 */
rlbot.flat.RenderMessage.getRootAsRenderMessage = function(bb, obj) {
  return (obj || new rlbot.flat.RenderMessage).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {rlbot.flat.RenderType}
 */
rlbot.flat.RenderMessage.prototype.renderType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {rlbot.flat.RenderType} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.RenderType.DrawLine2D;
};

/**
 * @param {rlbot.flat.Color=} obj
 * @returns {rlbot.flat.Color|null}
 */
rlbot.flat.RenderMessage.prototype.color = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Color).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * For 2d renders this only grabs x and y
 *
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.RenderMessage.prototype.start = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * For 2d renders this only grabs x and y
 *
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.RenderMessage.prototype.end = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * Scales the x size of the text/rectangle, is used for rectangles assuming an initial value of 1
 *
 * @returns {number}
 */
rlbot.flat.RenderMessage.prototype.scaleX = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 1;
};

/**
 * Scales the y size of the text/rectangle, is used for rectangles assuming an initial value of 1
 *
 * @returns {number}
 */
rlbot.flat.RenderMessage.prototype.scaleY = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 1;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
rlbot.flat.RenderMessage.prototype.text = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * Rectangles can be filled or just outlines.
 *
 * @returns {boolean}
 */
rlbot.flat.RenderMessage.prototype.isFilled = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.RenderMessage.startRenderMessage = function(builder) {
  builder.startObject(8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.RenderType} renderType
 */
rlbot.flat.RenderMessage.addRenderType = function(builder, renderType) {
  builder.addFieldInt8(0, renderType, rlbot.flat.RenderType.DrawLine2D);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} colorOffset
 */
rlbot.flat.RenderMessage.addColor = function(builder, colorOffset) {
  builder.addFieldOffset(1, colorOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} startOffset
 */
rlbot.flat.RenderMessage.addStart = function(builder, startOffset) {
  builder.addFieldStruct(2, startOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} endOffset
 */
rlbot.flat.RenderMessage.addEnd = function(builder, endOffset) {
  builder.addFieldStruct(3, endOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} scaleX
 */
rlbot.flat.RenderMessage.addScaleX = function(builder, scaleX) {
  builder.addFieldInt32(4, scaleX, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} scaleY
 */
rlbot.flat.RenderMessage.addScaleY = function(builder, scaleY) {
  builder.addFieldInt32(5, scaleY, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} textOffset
 */
rlbot.flat.RenderMessage.addText = function(builder, textOffset) {
  builder.addFieldOffset(6, textOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isFilled
 */
rlbot.flat.RenderMessage.addIsFilled = function(builder, isFilled) {
  builder.addFieldInt8(7, +isFilled, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.RenderMessage.endRenderMessage = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.RenderGroup = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.RenderGroup}
 */
rlbot.flat.RenderGroup.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.RenderGroup=} obj
 * @returns {rlbot.flat.RenderGroup}
 */
rlbot.flat.RenderGroup.getRootAsRenderGroup = function(bb, obj) {
  return (obj || new rlbot.flat.RenderGroup).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {rlbot.flat.RenderMessage=} obj
 * @returns {rlbot.flat.RenderMessage}
 */
rlbot.flat.RenderGroup.prototype.renderMessages = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.RenderMessage).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.RenderGroup.prototype.renderMessagesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * The id of the render group
 *
 * @returns {number}
 */
rlbot.flat.RenderGroup.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.RenderGroup.startRenderGroup = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} renderMessagesOffset
 */
rlbot.flat.RenderGroup.addRenderMessages = function(builder, renderMessagesOffset) {
  builder.addFieldOffset(0, renderMessagesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.RenderGroup.createRenderMessagesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.RenderGroup.startRenderMessagesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
rlbot.flat.RenderGroup.addId = function(builder, id) {
  builder.addFieldInt32(1, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.RenderGroup.endRenderGroup = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.QuickChat = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.QuickChat}
 */
rlbot.flat.QuickChat.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.QuickChat=} obj
 * @returns {rlbot.flat.QuickChat}
 */
rlbot.flat.QuickChat.getRootAsQuickChat = function(bb, obj) {
  return (obj || new rlbot.flat.QuickChat).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {rlbot.flat.QuickChatSelection}
 */
rlbot.flat.QuickChat.prototype.quickChatSelection = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {rlbot.flat.QuickChatSelection} */ (this.bb.readInt8(this.bb_pos + offset)) : rlbot.flat.QuickChatSelection.Information_IGotIt;
};

/**
 * The index of the player that sent the quick chat
 *
 * @returns {number}
 */
rlbot.flat.QuickChat.prototype.playerIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * True if the chat is team only false if everyone can see it.
 *
 * @returns {boolean}
 */
rlbot.flat.QuickChat.prototype.teamOnly = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.QuickChat.startQuickChat = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {rlbot.flat.QuickChatSelection} quickChatSelection
 */
rlbot.flat.QuickChat.addQuickChatSelection = function(builder, quickChatSelection) {
  builder.addFieldInt8(0, quickChatSelection, rlbot.flat.QuickChatSelection.Information_IGotIt);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} playerIndex
 */
rlbot.flat.QuickChat.addPlayerIndex = function(builder, playerIndex) {
  builder.addFieldInt32(1, playerIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} teamOnly
 */
rlbot.flat.QuickChat.addTeamOnly = function(builder, teamOnly) {
  builder.addFieldInt8(2, +teamOnly, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.QuickChat.endQuickChat = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
rlbot.flat.QuickChat.finishQuickChatBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @constructor
 */
rlbot.flat.TinyPlayer = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.TinyPlayer}
 */
rlbot.flat.TinyPlayer.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.TinyPlayer=} obj
 * @returns {rlbot.flat.TinyPlayer}
 */
rlbot.flat.TinyPlayer.getRootAsTinyPlayer = function(bb, obj) {
  return (obj || new rlbot.flat.TinyPlayer).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.TinyPlayer.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Rotator=} obj
 * @returns {rlbot.flat.Rotator|null}
 */
rlbot.flat.TinyPlayer.prototype.rotation = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Rotator).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.TinyPlayer.prototype.velocity = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @returns {boolean}
 */
rlbot.flat.TinyPlayer.prototype.hasWheelContact = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
rlbot.flat.TinyPlayer.prototype.isSupersonic = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {number}
 */
rlbot.flat.TinyPlayer.prototype.team = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
rlbot.flat.TinyPlayer.prototype.boost = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.TinyPlayer.startTinyPlayer = function(builder) {
  builder.startObject(7);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.TinyPlayer.addLocation = function(builder, locationOffset) {
  builder.addFieldStruct(0, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rotationOffset
 */
rlbot.flat.TinyPlayer.addRotation = function(builder, rotationOffset) {
  builder.addFieldStruct(1, rotationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} velocityOffset
 */
rlbot.flat.TinyPlayer.addVelocity = function(builder, velocityOffset) {
  builder.addFieldStruct(2, velocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} hasWheelContact
 */
rlbot.flat.TinyPlayer.addHasWheelContact = function(builder, hasWheelContact) {
  builder.addFieldInt8(3, +hasWheelContact, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} isSupersonic
 */
rlbot.flat.TinyPlayer.addIsSupersonic = function(builder, isSupersonic) {
  builder.addFieldInt8(4, +isSupersonic, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} team
 */
rlbot.flat.TinyPlayer.addTeam = function(builder, team) {
  builder.addFieldInt32(5, team, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} boost
 */
rlbot.flat.TinyPlayer.addBoost = function(builder, boost) {
  builder.addFieldInt32(6, boost, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.TinyPlayer.endTinyPlayer = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.TinyBall = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.TinyBall}
 */
rlbot.flat.TinyBall.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.TinyBall=} obj
 * @returns {rlbot.flat.TinyBall}
 */
rlbot.flat.TinyBall.getRootAsTinyBall = function(bb, obj) {
  return (obj || new rlbot.flat.TinyBall).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.TinyBall.prototype.location = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {rlbot.flat.Vector3=} obj
 * @returns {rlbot.flat.Vector3|null}
 */
rlbot.flat.TinyBall.prototype.velocity = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.TinyBall.startTinyBall = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locationOffset
 */
rlbot.flat.TinyBall.addLocation = function(builder, locationOffset) {
  builder.addFieldStruct(0, locationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} velocityOffset
 */
rlbot.flat.TinyBall.addVelocity = function(builder, velocityOffset) {
  builder.addFieldStruct(1, velocityOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.TinyBall.endTinyBall = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
rlbot.flat.TinyPacket = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {rlbot.flat.TinyPacket}
 */
rlbot.flat.TinyPacket.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {rlbot.flat.TinyPacket=} obj
 * @returns {rlbot.flat.TinyPacket}
 */
rlbot.flat.TinyPacket.getRootAsTinyPacket = function(bb, obj) {
  return (obj || new rlbot.flat.TinyPacket).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {rlbot.flat.TinyPlayer=} obj
 * @returns {rlbot.flat.TinyPlayer}
 */
rlbot.flat.TinyPacket.prototype.players = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.TinyPlayer).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
rlbot.flat.TinyPacket.prototype.playersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {rlbot.flat.TinyBall=} obj
 * @returns {rlbot.flat.TinyBall|null}
 */
rlbot.flat.TinyPacket.prototype.ball = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.TinyBall).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
rlbot.flat.TinyPacket.startTinyPacket = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} playersOffset
 */
rlbot.flat.TinyPacket.addPlayers = function(builder, playersOffset) {
  builder.addFieldOffset(0, playersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.TinyPacket.createPlayersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
rlbot.flat.TinyPacket.startPlayersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} ballOffset
 */
rlbot.flat.TinyPacket.addBall = function(builder, ballOffset) {
  builder.addFieldOffset(1, ballOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
rlbot.flat.TinyPacket.endTinyPacket = function(builder) {
  var offset = builder.endObject();
  return offset;
};

// Exports for Node.js and RequireJS
module.exports = rlbot
